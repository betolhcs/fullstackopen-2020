{"ast":null,"code":"var _jsxFileName = \"/home/beto/Documentos/FullStack/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Buttom = ({\n  set,\n  text\n}) => React.createElement(\"button\", {\n  onClick: set,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n}, \" \", text, \" \");\n\nconst Statistic = ({\n  typeofData,\n  data\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}, typeofData, \" \", data);\n\nconst Statistics = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(Statistic, {\n    typeofData: \"good\",\n    data: props.good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    typeofData: \"neutral\",\n    data: props.neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    typeofData: \"bad\",\n    data: props.bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    typeofData: \"all\",\n    data: props.all,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    typeofData: \"average\",\n    data: props.average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    typeofData: \"positive\",\n    data: props.positive.toString() + \" %\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  let all = good + bad + neutral;\n  let average = (good - bad) / all;\n  let positive = good / all;\n\n  if (all === 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"give feedback\"), React.createElement(Buttom, {\n      set: () => setGood(good + 1),\n      text: \"Good\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(Buttom, {\n      set: () => setNeutral(neutral + 1),\n      text: \"Neutral\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(Buttom, {\n      set: () => setBad(bad + 1),\n      text: \"Bad\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"statistics\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"No feedback given\"));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(Buttom, {\n    set: () => setGood(good + 1),\n    text: \"Good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Buttom, {\n    set: () => setNeutral(neutral + 1),\n    text: \"Neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Buttom, {\n    set: () => setBad(bad + 1),\n    text: \"Bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"statistics\"), React.createElement(Statistics, {\n    good: good,\n    bad: bad,\n    average: average,\n    all: all,\n    positive: positive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/beto/Documentos/FullStack/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Buttom","set","text","Statistic","typeofData","data","Statistics","props","good","neutral","bad","all","average","positive","toString","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Buttom = ({set, text}) => <button onClick={set}> {text} </button>\n\nconst Statistic = ({typeofData, data}) => <div>{typeofData} {data}</div>\n\nconst Statistics = (props) => {\n    return(\n            <div>\n            <Statistic typeofData=\"good\" data={props.good}/>\n            <Statistic typeofData=\"neutral\" data={props.neutral}/>\n            <Statistic typeofData=\"bad\" data={props.bad}/>\n            <Statistic typeofData=\"all\" data={props.all}/>\n            <Statistic typeofData=\"average\" data={props.average}/>\n            <Statistic typeofData=\"positive\" data={props.positive.toString()+\" %\"}/>    \n            </div>\n    )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n    let all = good+bad+neutral\n    let average = (good-bad)/all\n    let positive = good/all\n\n    if (all===0){\n        return(\n            <div>\n            <h1>give feedback</h1>\n            <Buttom set={() => setGood(good+1)} text={\"Good\"}/>\n            <Buttom set={() => setNeutral(neutral+1)} text={\"Neutral\"}/>\n            <Buttom set={() => setBad(bad+1)} text={\"Bad\"}/>\n            <h1>statistics</h1>\n            <p>No feedback given</p>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <h1>give feedback</h1>\n            <Buttom set={() => setGood(good+1)} text={\"Good\"}/>\n            <Buttom set={() => setNeutral(neutral+1)} text={\"Neutral\"}/>\n            <Buttom set={() => setBad(bad+1)} text={\"Bad\"}/>\n            <h1>statistics</h1>\n            <Statistics good={good} bad={bad} average={average} all={all} positive={positive}/>\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}