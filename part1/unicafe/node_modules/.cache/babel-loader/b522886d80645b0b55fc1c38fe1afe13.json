{"ast":null,"code":"var _jsxFileName = \"/home/beto/Documentos/FullStack/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Buttom = ({\n  set,\n  text\n}) => React.createElement(\"button\", {\n  onClick: set,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n}, \" \", text, \" \");\n\nconst Statistics = ({\n  typeofData,\n  data\n}) => React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}, typeofData, \" \", data);\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  let all = good + bad + neutral;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(Buttom, {\n    set: () => setGood(good + 1),\n    text: \"Good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(Buttom, {\n    set: () => setNeutral(neutral + 1),\n    text: \"Neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(Buttom, {\n    set: () => setBad(bad + 1),\n    text: \"Bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"statistics\"), React.createElement(Statistics, {\n    typeofData: \"good\",\n    data: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"neutral \", neutral.toString(), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), \"bad \", bad.toString(), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), \"all \", all.toString(), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), \"average \", ((good - bad) / all).toString(), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), \"positive \", (good / all * 100).toString() + \" %\"));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/beto/Documentos/FullStack/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Buttom","set","text","Statistics","typeofData","data","App","good","setGood","neutral","setNeutral","bad","setBad","all","toString","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAD,KAAiB;AAAQ,EAAA,OAAO,EAAED,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAwBC,IAAxB,MAAhC;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAID,UAAJ,OAAiBC,IAAjB,CAA3C;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACa,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,CAAC,CAAD,CAA9B;AACA,MAAIe,GAAG,GAAGN,IAAI,GAACI,GAAL,GAASF,OAAnB;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAE,MAAMD,OAAO,CAACD,IAAI,GAAC,CAAN,CAA1B;AAAoC,IAAA,IAAI,EAAE,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAE,MAAMG,UAAU,CAACD,OAAO,GAAC,CAAT,CAA7B;AAA0C,IAAA,IAAI,EAAE,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAE,MAAMG,MAAM,CAACD,GAAG,GAAC,CAAL,CAAzB;AAAkC,IAAA,IAAI,EAAE,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,EAMI,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAC,MAAvB;AAA8B,IAAA,IAAI,EAAEJ,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYE,OAAO,CAACK,QAAR,EAAZ,EAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA/B,UACKH,GAAG,CAACG,QAAJ,EADL,EACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADpB,UAEKD,GAAG,CAACC,QAAJ,EAFL,EAEoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFpB,cAGS,CAAC,CAACP,IAAI,GAACI,GAAN,IAAWE,GAAZ,EAAiBC,QAAjB,EAHT,EAGqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHrC,eAIU,CAACP,IAAI,GAACM,GAAL,GAAS,GAAV,EAAeC,QAAf,KAA4B,IAJtC,CAPJ,CADJ;AAeH,CAtBD;;AAwBAf,QAAQ,CAACgB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Buttom = ({set, text}) => <button onClick={set}> {text} </button>\n\nconst Statistics = ({typeofData, data}) => <p>{typeofData} {data}</p>\n\nconst App = () => {\n  // save clicks of each button to own state\n    const [good, setGood] = useState(0)\n    const [neutral, setNeutral] = useState(0)\n    const [bad, setBad] = useState(0)\n    let all = good+bad+neutral\n\n    return (\n        <div>\n            <h1>give feedback</h1>\n            <Buttom set={() => setGood(good+1)} text={\"Good\"}/>\n            <Buttom set={() => setNeutral(neutral+1)} text={\"Neutral\"}/>\n            <Buttom set={() => setBad(bad+1)} text={\"Bad\"}/>\n            <h1>statistics</h1>\n            <Statistics typeofData=\"good\" data={good}/>\n            <p>neutral {neutral.toString()}<br/>\n            bad {bad.toString()}<br/>\n            all {all.toString()}<br/>\n            average {((good-bad)/all).toString()}<br/>\n            positive {(good/all*100).toString() + \" %\"}</p>\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}